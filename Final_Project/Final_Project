{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "53bca230",
   "metadata": {},
   "source": [
    "# Work Plan\n",
    "## Open the data and study the general information\n",
    "- First, we would need to study the data and check the general information"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "9fdff95c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Project libraries has been successfully been imported!\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import time\n",
    "from datetime import datetime\n",
    "from IPython.display import display\n",
    "\n",
    "# matplotlib for visualization\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "# seaborn for statistical data visualization\n",
    "import seaborn as sns\n",
    "\n",
    "# import module for splitting and cross-validation using gridsearch\n",
    "from sklearn.model_selection import train_test_split, GridSearchCV\n",
    "\n",
    "# import modules for preprocessing\n",
    "from sklearn.preprocessing import OrdinalEncoder\n",
    "from sklearn.preprocessing import OneHotEncoder\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "pd.options.mode.chained_assignment = None # to avoid SettingWithCopyWarning after scaling\n",
    "\n",
    "# import machine learning module from the sklearn library\n",
    "from sklearn.dummy import DummyClassifier # import dummy classifier\n",
    "from sklearn.tree import DecisionTreeClassifier # import decision tree classifier\n",
    "from sklearn.linear_model import LogisticRegression # import logistic regression \n",
    "from sklearn.ensemble import RandomForestClassifier # import random forest algorithm\n",
    "from catboost import CatBoostClassifier # import catboost classifier\n",
    "from lightgbm import LGBMClassifier # import lightgbm classifier\n",
    "from xgboost import XGBClassifier # import xgboost classifier\n",
    "\n",
    "# import metrics for sanity check on model\n",
    "from sklearn import metrics\n",
    "from sklearn.metrics import *\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.metrics import confusion_matrix, classification_report\n",
    "from sklearn.metrics import precision_score, recall_score, f1_score, precision_recall_curve\n",
    "from sklearn.metrics import balanced_accuracy_score, roc_auc_score\n",
    "\n",
    "# import warnings\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "# import sklearn utilities\n",
    "from sklearn.utils import shuffle\n",
    "\n",
    "print('Project libraries has been successfully been imported!')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "77dab2fb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data has been read correctly!\n"
     ]
    }
   ],
   "source": [
    "# read the data\n",
    "contract_data = pd.read_csv('/datasets/final_provider/contract.csv')\n",
    "internet_data = pd.read_csv('/datasets/final_provider/internet.csv')\n",
    "personal_data = pd.read_csv('/datasets/final_provider/personal.csv')\n",
    "phone_data = pd.read_csv('/datasets/final_provider/phone.csv')\n",
    "print('Data has been read correctly!')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "21c38749",
   "metadata": {},
   "source": [
    "- We would need to check for missing values in the data\n",
    "- We would also describe the data\n",
    "- If missing values exist, we would fill in the missing values using the mode of the columns where the data is missing\n",
    "- We would check the data types and change data type if necessary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "55239e5e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# function to determine if columns in file have null values\n",
    "def get_percent_of_na(df, num):\n",
    "    count = 0\n",
    "    df = df.copy()\n",
    "    s = (df.isna().sum() / df.shape[0])\n",
    "    for column, percent in zip(s.index, s.values):\n",
    "        num_of_nulls = df[column].isna().sum()\n",
    "        if num_of_nulls == 0:\n",
    "            continue\n",
    "        else:\n",
    "            count += 1\n",
    "        print('Column {} has {:.{}%} percent of Nulls, and {} of nulls'.format(column, percent, num, num_of_nulls))\n",
    "    if count != 0:\n",
    "        print(\"\\033[1m\" + 'There are {} columns with NA.'.format(count) + \"\\033[0m\")\n",
    "    else:\n",
    "        print()\n",
    "        print(\"\\033[1m\" + 'There are no columns with NA.' + \"\\033[0m\")\n",
    "        \n",
    "# function to display general information about the dataset\n",
    "def get_info(df):\n",
    "    \"\"\"\n",
    "    This function uses the head(), info(), describe(), shape() and duplicated() \n",
    "    methods to display the general information about the dataset.\n",
    "    \"\"\"\n",
    "    print(\"\\033[1m\" + '-'*100 + \"\\033[0m\")\n",
    "    print('Head:')\n",
    "    print()\n",
    "    display(df.head())\n",
    "    print('-'*100)\n",
    "    print('Info:')\n",
    "    print()\n",
    "    display(df.info())\n",
    "    print('-'*100)\n",
    "    print('Describe:')\n",
    "    print()\n",
    "    display(df.describe())\n",
    "    print('-'*100)\n",
    "    display(df.describe(include='object'))\n",
    "    print()\n",
    "    print('Columns with nulls:')\n",
    "    display(get_percent_of_na(df, 4))  # check this out\n",
    "    print('-'*100)\n",
    "    print('Shape:')\n",
    "    print(df.shape)\n",
    "    print('-'*100)\n",
    "    print('Duplicated:')\n",
    "    print(\"\\033[1m\" + 'We have {} duplicated rows.\\n'.format(df.duplicated().sum()) + \"\\033[0m\")\n",
    "    print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "4a43efa5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "General information about the contract dataset\n",
      "\u001b[1m----------------------------------------------------------------------------------------------------\u001b[0m\n",
      "Head:\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customerID</th>\n",
       "      <th>BeginDate</th>\n",
       "      <th>EndDate</th>\n",
       "      <th>Type</th>\n",
       "      <th>PaperlessBilling</th>\n",
       "      <th>PaymentMethod</th>\n",
       "      <th>MonthlyCharges</th>\n",
       "      <th>TotalCharges</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7590-VHVEG</td>\n",
       "      <td>2020-01-01</td>\n",
       "      <td>No</td>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Electronic check</td>\n",
       "      <td>29.85</td>\n",
       "      <td>29.85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5575-GNVDE</td>\n",
       "      <td>2017-04-01</td>\n",
       "      <td>No</td>\n",
       "      <td>One year</td>\n",
       "      <td>No</td>\n",
       "      <td>Mailed check</td>\n",
       "      <td>56.95</td>\n",
       "      <td>1889.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3668-QPYBK</td>\n",
       "      <td>2019-10-01</td>\n",
       "      <td>2019-12-01 00:00:00</td>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Mailed check</td>\n",
       "      <td>53.85</td>\n",
       "      <td>108.15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7795-CFOCW</td>\n",
       "      <td>2016-05-01</td>\n",
       "      <td>No</td>\n",
       "      <td>One year</td>\n",
       "      <td>No</td>\n",
       "      <td>Bank transfer (automatic)</td>\n",
       "      <td>42.30</td>\n",
       "      <td>1840.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9237-HQITU</td>\n",
       "      <td>2019-09-01</td>\n",
       "      <td>2019-11-01 00:00:00</td>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Electronic check</td>\n",
       "      <td>70.70</td>\n",
       "      <td>151.65</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   customerID   BeginDate              EndDate            Type  \\\n",
       "0  7590-VHVEG  2020-01-01                   No  Month-to-month   \n",
       "1  5575-GNVDE  2017-04-01                   No        One year   \n",
       "2  3668-QPYBK  2019-10-01  2019-12-01 00:00:00  Month-to-month   \n",
       "3  7795-CFOCW  2016-05-01                   No        One year   \n",
       "4  9237-HQITU  2019-09-01  2019-11-01 00:00:00  Month-to-month   \n",
       "\n",
       "  PaperlessBilling              PaymentMethod  MonthlyCharges TotalCharges  \n",
       "0              Yes           Electronic check           29.85        29.85  \n",
       "1               No               Mailed check           56.95       1889.5  \n",
       "2              Yes               Mailed check           53.85       108.15  \n",
       "3               No  Bank transfer (automatic)           42.30      1840.75  \n",
       "4              Yes           Electronic check           70.70       151.65  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----------------------------------------------------------------------------------------------------\n",
      "Info:\n",
      "\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 7043 entries, 0 to 7042\n",
      "Data columns (total 8 columns):\n",
      " #   Column            Non-Null Count  Dtype  \n",
      "---  ------            --------------  -----  \n",
      " 0   customerID        7043 non-null   object \n",
      " 1   BeginDate         7043 non-null   object \n",
      " 2   EndDate           7043 non-null   object \n",
      " 3   Type              7043 non-null   object \n",
      " 4   PaperlessBilling  7043 non-null   object \n",
      " 5   PaymentMethod     7043 non-null   object \n",
      " 6   MonthlyCharges    7043 non-null   float64\n",
      " 7   TotalCharges      7043 non-null   object \n",
      "dtypes: float64(1), object(7)\n",
      "memory usage: 440.3+ KB\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----------------------------------------------------------------------------------------------------\n",
      "Describe:\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MonthlyCharges</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>7043.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>64.761692</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>30.090047</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>18.250000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>35.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>70.350000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>89.850000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>118.750000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       MonthlyCharges\n",
       "count     7043.000000\n",
       "mean        64.761692\n",
       "std         30.090047\n",
       "min         18.250000\n",
       "25%         35.500000\n",
       "50%         70.350000\n",
       "75%         89.850000\n",
       "max        118.750000"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----------------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customerID</th>\n",
       "      <th>BeginDate</th>\n",
       "      <th>EndDate</th>\n",
       "      <th>Type</th>\n",
       "      <th>PaperlessBilling</th>\n",
       "      <th>PaymentMethod</th>\n",
       "      <th>TotalCharges</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>7043</td>\n",
       "      <td>7043</td>\n",
       "      <td>7043</td>\n",
       "      <td>7043</td>\n",
       "      <td>7043</td>\n",
       "      <td>7043</td>\n",
       "      <td>7043</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>7043</td>\n",
       "      <td>77</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>6531</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>5240-IJOQT</td>\n",
       "      <td>2014-02-01</td>\n",
       "      <td>No</td>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Electronic check</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>1</td>\n",
       "      <td>366</td>\n",
       "      <td>5174</td>\n",
       "      <td>3875</td>\n",
       "      <td>4171</td>\n",
       "      <td>2365</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        customerID   BeginDate EndDate            Type PaperlessBilling  \\\n",
       "count         7043        7043    7043            7043             7043   \n",
       "unique        7043          77       5               3                2   \n",
       "top     5240-IJOQT  2014-02-01      No  Month-to-month              Yes   \n",
       "freq             1         366    5174            3875             4171   \n",
       "\n",
       "           PaymentMethod TotalCharges  \n",
       "count               7043         7043  \n",
       "unique                 4         6531  \n",
       "top     Electronic check               \n",
       "freq                2365           11  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Columns with nulls:\n",
      "\n",
      "\u001b[1mThere are no columns with NA.\u001b[0m\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----------------------------------------------------------------------------------------------------\n",
      "Shape:\n",
      "(7043, 8)\n",
      "----------------------------------------------------------------------------------------------------\n",
      "Duplicated:\n",
      "\u001b[1mWe have 0 duplicated rows.\n",
      "\u001b[0m\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# study the general information about the contract dataset \n",
    "print('General information about the contract dataset')\n",
    "get_info(contract_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "48f840cf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "General information about the internet dataset\n",
      "\u001b[1m----------------------------------------------------------------------------------------------------\u001b[0m\n",
      "Head:\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customerID</th>\n",
       "      <th>InternetService</th>\n",
       "      <th>OnlineSecurity</th>\n",
       "      <th>OnlineBackup</th>\n",
       "      <th>DeviceProtection</th>\n",
       "      <th>TechSupport</th>\n",
       "      <th>StreamingTV</th>\n",
       "      <th>StreamingMovies</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7590-VHVEG</td>\n",
       "      <td>DSL</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5575-GNVDE</td>\n",
       "      <td>DSL</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3668-QPYBK</td>\n",
       "      <td>DSL</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7795-CFOCW</td>\n",
       "      <td>DSL</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9237-HQITU</td>\n",
       "      <td>Fiber optic</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   customerID InternetService OnlineSecurity OnlineBackup DeviceProtection  \\\n",
       "0  7590-VHVEG             DSL             No          Yes               No   \n",
       "1  5575-GNVDE             DSL            Yes           No              Yes   \n",
       "2  3668-QPYBK             DSL            Yes          Yes               No   \n",
       "3  7795-CFOCW             DSL            Yes           No              Yes   \n",
       "4  9237-HQITU     Fiber optic             No           No               No   \n",
       "\n",
       "  TechSupport StreamingTV StreamingMovies  \n",
       "0          No          No              No  \n",
       "1          No          No              No  \n",
       "2          No          No              No  \n",
       "3         Yes          No              No  \n",
       "4          No          No              No  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----------------------------------------------------------------------------------------------------\n",
      "Info:\n",
      "\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 5517 entries, 0 to 5516\n",
      "Data columns (total 8 columns):\n",
      " #   Column            Non-Null Count  Dtype \n",
      "---  ------            --------------  ----- \n",
      " 0   customerID        5517 non-null   object\n",
      " 1   InternetService   5517 non-null   object\n",
      " 2   OnlineSecurity    5517 non-null   object\n",
      " 3   OnlineBackup      5517 non-null   object\n",
      " 4   DeviceProtection  5517 non-null   object\n",
      " 5   TechSupport       5517 non-null   object\n",
      " 6   StreamingTV       5517 non-null   object\n",
      " 7   StreamingMovies   5517 non-null   object\n",
      "dtypes: object(8)\n",
      "memory usage: 344.9+ KB\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----------------------------------------------------------------------------------------------------\n",
      "Describe:\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customerID</th>\n",
       "      <th>InternetService</th>\n",
       "      <th>OnlineSecurity</th>\n",
       "      <th>OnlineBackup</th>\n",
       "      <th>DeviceProtection</th>\n",
       "      <th>TechSupport</th>\n",
       "      <th>StreamingTV</th>\n",
       "      <th>StreamingMovies</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>5517</td>\n",
       "      <td>5517</td>\n",
       "      <td>5517</td>\n",
       "      <td>5517</td>\n",
       "      <td>5517</td>\n",
       "      <td>5517</td>\n",
       "      <td>5517</td>\n",
       "      <td>5517</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>5517</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>6647-ZEDXT</td>\n",
       "      <td>Fiber optic</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>1</td>\n",
       "      <td>3096</td>\n",
       "      <td>3498</td>\n",
       "      <td>3088</td>\n",
       "      <td>3095</td>\n",
       "      <td>3473</td>\n",
       "      <td>2810</td>\n",
       "      <td>2785</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        customerID InternetService OnlineSecurity OnlineBackup  \\\n",
       "count         5517            5517           5517         5517   \n",
       "unique        5517               2              2            2   \n",
       "top     6647-ZEDXT     Fiber optic             No           No   \n",
       "freq             1            3096           3498         3088   \n",
       "\n",
       "       DeviceProtection TechSupport StreamingTV StreamingMovies  \n",
       "count              5517        5517        5517            5517  \n",
       "unique                2           2           2               2  \n",
       "top                  No          No          No              No  \n",
       "freq               3095        3473        2810            2785  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----------------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customerID</th>\n",
       "      <th>InternetService</th>\n",
       "      <th>OnlineSecurity</th>\n",
       "      <th>OnlineBackup</th>\n",
       "      <th>DeviceProtection</th>\n",
       "      <th>TechSupport</th>\n",
       "      <th>StreamingTV</th>\n",
       "      <th>StreamingMovies</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>5517</td>\n",
       "      <td>5517</td>\n",
       "      <td>5517</td>\n",
       "      <td>5517</td>\n",
       "      <td>5517</td>\n",
       "      <td>5517</td>\n",
       "      <td>5517</td>\n",
       "      <td>5517</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>5517</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>6647-ZEDXT</td>\n",
       "      <td>Fiber optic</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>1</td>\n",
       "      <td>3096</td>\n",
       "      <td>3498</td>\n",
       "      <td>3088</td>\n",
       "      <td>3095</td>\n",
       "      <td>3473</td>\n",
       "      <td>2810</td>\n",
       "      <td>2785</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        customerID InternetService OnlineSecurity OnlineBackup  \\\n",
       "count         5517            5517           5517         5517   \n",
       "unique        5517               2              2            2   \n",
       "top     6647-ZEDXT     Fiber optic             No           No   \n",
       "freq             1            3096           3498         3088   \n",
       "\n",
       "       DeviceProtection TechSupport StreamingTV StreamingMovies  \n",
       "count              5517        5517        5517            5517  \n",
       "unique                2           2           2               2  \n",
       "top                  No          No          No              No  \n",
       "freq               3095        3473        2810            2785  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Columns with nulls:\n",
      "\n",
      "\u001b[1mThere are no columns with NA.\u001b[0m\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----------------------------------------------------------------------------------------------------\n",
      "Shape:\n",
      "(5517, 8)\n",
      "----------------------------------------------------------------------------------------------------\n",
      "Duplicated:\n",
      "\u001b[1mWe have 0 duplicated rows.\n",
      "\u001b[0m\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# study the general information about the internet dataset \n",
    "print('General information about the internet dataset')\n",
    "get_info(internet_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "4297da6e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "General information about the personal dataset\n",
      "\u001b[1m----------------------------------------------------------------------------------------------------\u001b[0m\n",
      "Head:\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customerID</th>\n",
       "      <th>gender</th>\n",
       "      <th>SeniorCitizen</th>\n",
       "      <th>Partner</th>\n",
       "      <th>Dependents</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7590-VHVEG</td>\n",
       "      <td>Female</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5575-GNVDE</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3668-QPYBK</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7795-CFOCW</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9237-HQITU</td>\n",
       "      <td>Female</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   customerID  gender  SeniorCitizen Partner Dependents\n",
       "0  7590-VHVEG  Female              0     Yes         No\n",
       "1  5575-GNVDE    Male              0      No         No\n",
       "2  3668-QPYBK    Male              0      No         No\n",
       "3  7795-CFOCW    Male              0      No         No\n",
       "4  9237-HQITU  Female              0      No         No"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----------------------------------------------------------------------------------------------------\n",
      "Info:\n",
      "\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 7043 entries, 0 to 7042\n",
      "Data columns (total 5 columns):\n",
      " #   Column         Non-Null Count  Dtype \n",
      "---  ------         --------------  ----- \n",
      " 0   customerID     7043 non-null   object\n",
      " 1   gender         7043 non-null   object\n",
      " 2   SeniorCitizen  7043 non-null   int64 \n",
      " 3   Partner        7043 non-null   object\n",
      " 4   Dependents     7043 non-null   object\n",
      "dtypes: int64(1), object(4)\n",
      "memory usage: 275.2+ KB\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----------------------------------------------------------------------------------------------------\n",
      "Describe:\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SeniorCitizen</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>7043.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.162147</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.368612</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       SeniorCitizen\n",
       "count    7043.000000\n",
       "mean        0.162147\n",
       "std         0.368612\n",
       "min         0.000000\n",
       "25%         0.000000\n",
       "50%         0.000000\n",
       "75%         0.000000\n",
       "max         1.000000"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----------------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customerID</th>\n",
       "      <th>gender</th>\n",
       "      <th>Partner</th>\n",
       "      <th>Dependents</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>7043</td>\n",
       "      <td>7043</td>\n",
       "      <td>7043</td>\n",
       "      <td>7043</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>7043</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>5240-IJOQT</td>\n",
       "      <td>Male</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>1</td>\n",
       "      <td>3555</td>\n",
       "      <td>3641</td>\n",
       "      <td>4933</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        customerID gender Partner Dependents\n",
       "count         7043   7043    7043       7043\n",
       "unique        7043      2       2          2\n",
       "top     5240-IJOQT   Male      No         No\n",
       "freq             1   3555    3641       4933"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Columns with nulls:\n",
      "\n",
      "\u001b[1mThere are no columns with NA.\u001b[0m\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----------------------------------------------------------------------------------------------------\n",
      "Shape:\n",
      "(7043, 5)\n",
      "----------------------------------------------------------------------------------------------------\n",
      "Duplicated:\n",
      "\u001b[1mWe have 0 duplicated rows.\n",
      "\u001b[0m\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# study the general information about the personal dataset \n",
    "print('General information about the personal dataset')\n",
    "get_info(personal_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "04f6420c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "General information about the phone dataset\n",
      "\u001b[1m----------------------------------------------------------------------------------------------------\u001b[0m\n",
      "Head:\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customerID</th>\n",
       "      <th>MultipleLines</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5575-GNVDE</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3668-QPYBK</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>9237-HQITU</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>9305-CDSKC</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1452-KIOVK</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   customerID MultipleLines\n",
       "0  5575-GNVDE            No\n",
       "1  3668-QPYBK            No\n",
       "2  9237-HQITU            No\n",
       "3  9305-CDSKC           Yes\n",
       "4  1452-KIOVK           Yes"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----------------------------------------------------------------------------------------------------\n",
      "Info:\n",
      "\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 6361 entries, 0 to 6360\n",
      "Data columns (total 2 columns):\n",
      " #   Column         Non-Null Count  Dtype \n",
      "---  ------         --------------  ----- \n",
      " 0   customerID     6361 non-null   object\n",
      " 1   MultipleLines  6361 non-null   object\n",
      "dtypes: object(2)\n",
      "memory usage: 99.5+ KB\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----------------------------------------------------------------------------------------------------\n",
      "Describe:\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customerID</th>\n",
       "      <th>MultipleLines</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>6361</td>\n",
       "      <td>6361</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>6361</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>5240-IJOQT</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>1</td>\n",
       "      <td>3390</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        customerID MultipleLines\n",
       "count         6361          6361\n",
       "unique        6361             2\n",
       "top     5240-IJOQT            No\n",
       "freq             1          3390"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----------------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customerID</th>\n",
       "      <th>MultipleLines</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>6361</td>\n",
       "      <td>6361</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>6361</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>5240-IJOQT</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>1</td>\n",
       "      <td>3390</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        customerID MultipleLines\n",
       "count         6361          6361\n",
       "unique        6361             2\n",
       "top     5240-IJOQT            No\n",
       "freq             1          3390"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Columns with nulls:\n",
      "\n",
      "\u001b[1mThere are no columns with NA.\u001b[0m\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----------------------------------------------------------------------------------------------------\n",
      "Shape:\n",
      "(6361, 2)\n",
      "----------------------------------------------------------------------------------------------------\n",
      "Duplicated:\n",
      "\u001b[1mWe have 0 duplicated rows.\n",
      "\u001b[0m\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# study the general information about the phone dataset \n",
    "print('General information about the phone dataset')\n",
    "get_info(phone_data)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a6838ff0",
   "metadata": {},
   "source": [
    "### Conclusion\n",
    "By looking at the general information about the data, we find that:\n",
    "\n",
    "contract_data has 7043 rows and 8 columns with no missing values and no duplicated values\n",
    "internet_data has 5517 rows and 8 columns with no missing values and no duplicated values\n",
    "personal_data has 7043 rows and 5 columns with no missing values and no duplicated values\n",
    "phone_data has 6361 rows and 2 columns with no missing values and no duplicated values\n",
    "We need to change datatype to the right datatype. For instance, in contract_data, we need to change BeginDate, EndDate to Datetime and TotalCharges to float. We also need to preprocess the data and generate new features for machine learning.\n",
    "\n",
    "## Data Preprocessing\n",
    "In this section, we would be wrangling the data. We would have to merge the dataset, replace column names, change datatypes and perform feature engineering.\n",
    "\n",
    "### Merge Datasets\n",
    "Before we begin to preprocess the data, we can merge all the individual datasets into one dataframe using the merge() function in pandas."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "a5d6c8be",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customerID</th>\n",
       "      <th>BeginDate</th>\n",
       "      <th>EndDate</th>\n",
       "      <th>Type</th>\n",
       "      <th>PaperlessBilling</th>\n",
       "      <th>PaymentMethod</th>\n",
       "      <th>MonthlyCharges</th>\n",
       "      <th>TotalCharges</th>\n",
       "      <th>InternetService</th>\n",
       "      <th>OnlineSecurity</th>\n",
       "      <th>OnlineBackup</th>\n",
       "      <th>DeviceProtection</th>\n",
       "      <th>TechSupport</th>\n",
       "      <th>StreamingTV</th>\n",
       "      <th>StreamingMovies</th>\n",
       "      <th>gender</th>\n",
       "      <th>SeniorCitizen</th>\n",
       "      <th>Partner</th>\n",
       "      <th>Dependents</th>\n",
       "      <th>MultipleLines</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5582</th>\n",
       "      <td>7601-DHFWZ</td>\n",
       "      <td>2016-02-01</td>\n",
       "      <td>No</td>\n",
       "      <td>Two year</td>\n",
       "      <td>No</td>\n",
       "      <td>Credit card (automatic)</td>\n",
       "      <td>24.00</td>\n",
       "      <td>1183.05</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Female</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1237</th>\n",
       "      <td>2788-CJQAQ</td>\n",
       "      <td>2019-01-01</td>\n",
       "      <td>No</td>\n",
       "      <td>One year</td>\n",
       "      <td>No</td>\n",
       "      <td>Mailed check</td>\n",
       "      <td>19.45</td>\n",
       "      <td>270.2</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4585</th>\n",
       "      <td>1069-XAIEM</td>\n",
       "      <td>2019-11-01</td>\n",
       "      <td>2019-12-01 00:00:00</td>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Electronic check</td>\n",
       "      <td>85.05</td>\n",
       "      <td>85.05</td>\n",
       "      <td>Fiber optic</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Female</td>\n",
       "      <td>1</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3957</th>\n",
       "      <td>2019-HDCZY</td>\n",
       "      <td>2014-11-01</td>\n",
       "      <td>No</td>\n",
       "      <td>Two year</td>\n",
       "      <td>No</td>\n",
       "      <td>Electronic check</td>\n",
       "      <td>102.60</td>\n",
       "      <td>6296.75</td>\n",
       "      <td>Fiber optic</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5741</th>\n",
       "      <td>5883-GTGVD</td>\n",
       "      <td>2018-06-01</td>\n",
       "      <td>2020-01-01 00:00:00</td>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Electronic check</td>\n",
       "      <td>99.95</td>\n",
       "      <td>1931.75</td>\n",
       "      <td>Fiber optic</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      customerID   BeginDate              EndDate            Type  \\\n",
       "5582  7601-DHFWZ  2016-02-01                   No        Two year   \n",
       "1237  2788-CJQAQ  2019-01-01                   No        One year   \n",
       "4585  1069-XAIEM  2019-11-01  2019-12-01 00:00:00  Month-to-month   \n",
       "3957  2019-HDCZY  2014-11-01                   No        Two year   \n",
       "5741  5883-GTGVD  2018-06-01  2020-01-01 00:00:00  Month-to-month   \n",
       "\n",
       "     PaperlessBilling            PaymentMethod  MonthlyCharges TotalCharges  \\\n",
       "5582               No  Credit card (automatic)           24.00      1183.05   \n",
       "1237               No             Mailed check           19.45        270.2   \n",
       "4585              Yes         Electronic check           85.05        85.05   \n",
       "3957               No         Electronic check          102.60      6296.75   \n",
       "5741              Yes         Electronic check           99.95      1931.75   \n",
       "\n",
       "     InternetService OnlineSecurity OnlineBackup DeviceProtection TechSupport  \\\n",
       "5582              No             No           No               No          No   \n",
       "1237              No             No           No               No          No   \n",
       "4585     Fiber optic             No           No               No          No   \n",
       "3957     Fiber optic             No           No              Yes          No   \n",
       "5741     Fiber optic             No          Yes               No          No   \n",
       "\n",
       "     StreamingTV StreamingMovies  gender  SeniorCitizen Partner Dependents  \\\n",
       "5582          No              No  Female              0      No         No   \n",
       "1237          No              No    Male              0      No         No   \n",
       "4585          No             Yes  Female              1      No         No   \n",
       "3957         Yes             Yes    Male              0     Yes         No   \n",
       "5741         Yes             Yes    Male              0      No         No   \n",
       "\n",
       "     MultipleLines  \n",
       "5582           Yes  \n",
       "1237            No  \n",
       "4585           Yes  \n",
       "3957           Yes  \n",
       "5741           Yes  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# joining datasets \n",
    "merged_df = pd.merge(contract_data, internet_data, on=\"customerID\", how='left')\n",
    "merged_df1 = pd.merge(merged_df, personal_data, on=\"customerID\", how='left')\n",
    "merged_df2 = pd.merge(merged_df1, phone_data, on=\"customerID\", how='left')\n",
    "merged_df2 = merged_df2.fillna('No')\n",
    "merged_df2.sample(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "bdb7bf45",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 7043 entries, 0 to 7042\n",
      "Data columns (total 20 columns):\n",
      " #   Column            Non-Null Count  Dtype  \n",
      "---  ------            --------------  -----  \n",
      " 0   customerID        7043 non-null   object \n",
      " 1   BeginDate         7043 non-null   object \n",
      " 2   EndDate           7043 non-null   object \n",
      " 3   Type              7043 non-null   object \n",
      " 4   PaperlessBilling  7043 non-null   object \n",
      " 5   PaymentMethod     7043 non-null   object \n",
      " 6   MonthlyCharges    7043 non-null   float64\n",
      " 7   TotalCharges      7043 non-null   object \n",
      " 8   InternetService   7043 non-null   object \n",
      " 9   OnlineSecurity    7043 non-null   object \n",
      " 10  OnlineBackup      7043 non-null   object \n",
      " 11  DeviceProtection  7043 non-null   object \n",
      " 12  TechSupport       7043 non-null   object \n",
      " 13  StreamingTV       7043 non-null   object \n",
      " 14  StreamingMovies   7043 non-null   object \n",
      " 15  gender            7043 non-null   object \n",
      " 16  SeniorCitizen     7043 non-null   int64  \n",
      " 17  Partner           7043 non-null   object \n",
      " 18  Dependents        7043 non-null   object \n",
      " 19  MultipleLines     7043 non-null   object \n",
      "dtypes: float64(1), int64(1), object(18)\n",
      "memory usage: 1.1+ MB\n"
     ]
    }
   ],
   "source": [
    "# create copy of dataset\n",
    "telecom_df = merged_df2.copy()\n",
    "telecom_df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1a72b05d",
   "metadata": {},
   "source": [
    "### Replace column names\n",
    "The next step in data preprocessing will be to replace columns names in our dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "b64f014b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# rename columns\n",
    "telecom_df = telecom_df.rename(columns={'customerID': 'customer_id', 'BeginDate': 'begin_date', 'EndDate': 'end_date', 'Type': 'type',\n",
    "       'PaperlessBilling': 'paperless_billing', 'PaymentMethod': 'payment_method', 'MonthlyCharges': 'monthly_charges', 'TotalCharges': 'total_charges',\n",
    "       'gender': 'gender', 'SeniorCitizen': 'senior_citizen', 'Partner': 'partner', 'Dependents': 'dependents', 'MultipleLines': 'multiple_lines',\n",
    "       'InternetService': 'internet_service', 'OnlineSecurity': 'online_security', 'OnlineBackup': 'online_backup', 'DeviceProtection': 'device_protection',\n",
    "       'TechSupport': 'tech_support', 'StreamingTV': 'streaming_tv', 'StreamingMovies': 'streaming_movies'})"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "457adc4b",
   "metadata": {},
   "source": [
    "We renamed column names so that the column names will be uniform. i.e., using snake case for improved readability. The rename() function in pandas is used to make these changes.\n",
    "\n",
    "### Change Datatypes\n",
    "Next, we change datatypes to the right format. For instance, begin_date and end_date will be changed to Datetime, monthly_charges and total_charges to float32, senior_citizen to int32 datatypes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "7e00a747",
   "metadata": {},
   "outputs": [],
   "source": [
    "# function to change data to the right type\n",
    "def change_datatype(df, cols, type_val):\n",
    "    for col in cols:\n",
    "        df[col] = df[col].astype(type_val)\n",
    "\n",
    "# create new end date feature\n",
    "list_value = []\n",
    "for value in telecom_df.end_date:\n",
    "    if value != 'No':\n",
    "        datetime_value = datetime.strptime(value, '%Y-%m-%d %H:%M:%S')\n",
    "        list_value.append(datetime_value)\n",
    "    else:\n",
    "        contract_valid_date = '2020-02-01 00:00:00' # date contract is valid\n",
    "        contract_valid_date_value = datetime.strptime(contract_valid_date, '%Y-%m-%d %H:%M:%S')\n",
    "        list_value.append(contract_valid_date_value)\n",
    "EndDate_value = pd.to_datetime(list_value)\n",
    "telecom_df.insert(3, 'end_date_value', EndDate_value)\n",
    "\n",
    "# prepare TotalChargers \n",
    "telecom_df.loc[telecom_df['total_charges'].isin([' ']),'total_charges'] = 0\n",
    "\n",
    "# change datatypes\n",
    "change_datatype(telecom_df, ['begin_date'], 'datetime64[ns]')\n",
    "change_datatype(telecom_df, ['monthly_charges', 'total_charges'], 'float32')\n",
    "change_datatype(telecom_df, ['senior_citizen'], 'int32')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "e6fe76a9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 7043 entries, 0 to 7042\n",
      "Data columns (total 21 columns):\n",
      " #   Column             Non-Null Count  Dtype         \n",
      "---  ------             --------------  -----         \n",
      " 0   customer_id        7043 non-null   object        \n",
      " 1   begin_date         7043 non-null   datetime64[ns]\n",
      " 2   end_date           7043 non-null   object        \n",
      " 3   end_date_value     7043 non-null   datetime64[ns]\n",
      " 4   type               7043 non-null   object        \n",
      " 5   paperless_billing  7043 non-null   object        \n",
      " 6   payment_method     7043 non-null   object        \n",
      " 7   monthly_charges    7043 non-null   float32       \n",
      " 8   total_charges      7043 non-null   float32       \n",
      " 9   internet_service   7043 non-null   object        \n",
      " 10  online_security    7043 non-null   object        \n",
      " 11  online_backup      7043 non-null   object        \n",
      " 12  device_protection  7043 non-null   object        \n",
      " 13  tech_support       7043 non-null   object        \n",
      " 14  streaming_tv       7043 non-null   object        \n",
      " 15  streaming_movies   7043 non-null   object        \n",
      " 16  gender             7043 non-null   object        \n",
      " 17  senior_citizen     7043 non-null   int32         \n",
      " 18  partner            7043 non-null   object        \n",
      " 19  dependents         7043 non-null   object        \n",
      " 20  multiple_lines     7043 non-null   object        \n",
      "dtypes: datetime64[ns](2), float32(2), int32(1), object(16)\n",
      "memory usage: 1.1+ MB\n"
     ]
    }
   ],
   "source": [
    "# check data information\n",
    "telecom_df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "542b79f9",
   "metadata": {},
   "source": [
    "### Feature engineering\n",
    "Here, we will create new features such as length of tenure tenure, the target end date exited denoted as 0 for no churn and 1 for churn, service_count denoting the number of products (or services) the customer is currently using, has_crcard indicating the customer uses credit card for payment, year, month and dayofweek the customer began using Interconnect's services."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "9c8eaaae",
   "metadata": {},
   "outputs": [],
   "source": [
    "# change date type to datetime and split into day, month and year\n",
    "def new_date_features(df):\n",
    "    columns = df.columns.tolist()\n",
    "    idx = [columns.index(x) for x in columns if 'begin_date' in x][0]\n",
    "    \n",
    "    df[columns[idx]] = pd.to_datetime(df[columns[idx]])\n",
    "    df['dayofweek'] = df[columns[idx]].dt.day_name()\n",
    "    df['month'] = df[columns[idx]].dt.month_name()\n",
    "    df['year'] = df[columns[idx]].dt.year\n",
    "    return df;   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "1fb39439",
   "metadata": {},
   "outputs": [],
   "source": [
    "# add new features to data\n",
    "new_date_features(telecom_df)\n",
    "telecom_df['tenure'] = telecom_df['end_date_value'].dt.year - telecom_df['begin_date'].dt.year\n",
    "telecom_df['has_crcard'] = [1 if x == 'Credit card (automatic)' else 0 for x in telecom_df['payment_method']]\n",
    "telecom_df['exited'] = [1 if x != 'No' else 0 for x in telecom_df['end_date']]\n",
    "telecom_df['service_count'] = [x.count('Yes') for x in zip(telecom_df['online_security'], telecom_df['online_backup'], telecom_df['device_protection'], \n",
    "                                                           telecom_df['tech_support'], telecom_df['streaming_tv'], telecom_df['streaming_movies'])]\n",
    "change_datatype(telecom_df, ['year', 'tenure', 'has_crcard', 'exited', 'service_count'], 'int32') # reduce memory usage by changing datatypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "858965c7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customer_id</th>\n",
       "      <th>begin_date</th>\n",
       "      <th>end_date</th>\n",
       "      <th>end_date_value</th>\n",
       "      <th>type</th>\n",
       "      <th>paperless_billing</th>\n",
       "      <th>payment_method</th>\n",
       "      <th>monthly_charges</th>\n",
       "      <th>total_charges</th>\n",
       "      <th>internet_service</th>\n",
       "      <th>...</th>\n",
       "      <th>partner</th>\n",
       "      <th>dependents</th>\n",
       "      <th>multiple_lines</th>\n",
       "      <th>dayofweek</th>\n",
       "      <th>month</th>\n",
       "      <th>year</th>\n",
       "      <th>tenure</th>\n",
       "      <th>has_crcard</th>\n",
       "      <th>exited</th>\n",
       "      <th>service_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7590-VHVEG</td>\n",
       "      <td>2020-01-01</td>\n",
       "      <td>No</td>\n",
       "      <td>2020-02-01</td>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Electronic check</td>\n",
       "      <td>29.850000</td>\n",
       "      <td>29.850000</td>\n",
       "      <td>DSL</td>\n",
       "      <td>...</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Wednesday</td>\n",
       "      <td>January</td>\n",
       "      <td>2020</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5575-GNVDE</td>\n",
       "      <td>2017-04-01</td>\n",
       "      <td>No</td>\n",
       "      <td>2020-02-01</td>\n",
       "      <td>One year</td>\n",
       "      <td>No</td>\n",
       "      <td>Mailed check</td>\n",
       "      <td>56.950001</td>\n",
       "      <td>1889.500000</td>\n",
       "      <td>DSL</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Saturday</td>\n",
       "      <td>April</td>\n",
       "      <td>2017</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3668-QPYBK</td>\n",
       "      <td>2019-10-01</td>\n",
       "      <td>2019-12-01 00:00:00</td>\n",
       "      <td>2019-12-01</td>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Mailed check</td>\n",
       "      <td>53.849998</td>\n",
       "      <td>108.150002</td>\n",
       "      <td>DSL</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Tuesday</td>\n",
       "      <td>October</td>\n",
       "      <td>2019</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7795-CFOCW</td>\n",
       "      <td>2016-05-01</td>\n",
       "      <td>No</td>\n",
       "      <td>2020-02-01</td>\n",
       "      <td>One year</td>\n",
       "      <td>No</td>\n",
       "      <td>Bank transfer (automatic)</td>\n",
       "      <td>42.299999</td>\n",
       "      <td>1840.750000</td>\n",
       "      <td>DSL</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Sunday</td>\n",
       "      <td>May</td>\n",
       "      <td>2016</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9237-HQITU</td>\n",
       "      <td>2019-09-01</td>\n",
       "      <td>2019-11-01 00:00:00</td>\n",
       "      <td>2019-11-01</td>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Electronic check</td>\n",
       "      <td>70.699997</td>\n",
       "      <td>151.649994</td>\n",
       "      <td>Fiber optic</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Sunday</td>\n",
       "      <td>September</td>\n",
       "      <td>2019</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 28 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  customer_id begin_date             end_date end_date_value            type  \\\n",
       "0  7590-VHVEG 2020-01-01                   No     2020-02-01  Month-to-month   \n",
       "1  5575-GNVDE 2017-04-01                   No     2020-02-01        One year   \n",
       "2  3668-QPYBK 2019-10-01  2019-12-01 00:00:00     2019-12-01  Month-to-month   \n",
       "3  7795-CFOCW 2016-05-01                   No     2020-02-01        One year   \n",
       "4  9237-HQITU 2019-09-01  2019-11-01 00:00:00     2019-11-01  Month-to-month   \n",
       "\n",
       "  paperless_billing             payment_method  monthly_charges  \\\n",
       "0               Yes           Electronic check        29.850000   \n",
       "1                No               Mailed check        56.950001   \n",
       "2               Yes               Mailed check        53.849998   \n",
       "3                No  Bank transfer (automatic)        42.299999   \n",
       "4               Yes           Electronic check        70.699997   \n",
       "\n",
       "   total_charges internet_service  ... partner dependents multiple_lines  \\\n",
       "0      29.850000              DSL  ...     Yes         No             No   \n",
       "1    1889.500000              DSL  ...      No         No             No   \n",
       "2     108.150002              DSL  ...      No         No             No   \n",
       "3    1840.750000              DSL  ...      No         No             No   \n",
       "4     151.649994      Fiber optic  ...      No         No             No   \n",
       "\n",
       "   dayofweek      month  year tenure  has_crcard exited service_count  \n",
       "0  Wednesday    January  2020      0           0      0             1  \n",
       "1   Saturday      April  2017      3           0      0             2  \n",
       "2    Tuesday    October  2019      0           0      1             2  \n",
       "3     Sunday        May  2016      4           0      0             3  \n",
       "4     Sunday  September  2019      0           0      1             0  \n",
       "\n",
       "[5 rows x 28 columns]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# check dataframe\n",
    "telecom_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "84dcf361",
   "metadata": {},
   "source": [
    "Using list comprehension, we have been able to generate new features that are relevant to the dataset. We engineered features such as tenure, exited, service_count, has_crcard, year, month and dayofweek. All these features will help our machine learning model to avoid bias when building the model. We also don't want to have too many features to avoid high variance - when the model is too complex that it doesn't generalize well to the test data or it overfits the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "9de6c5f4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 7043 entries, 0 to 7042\n",
      "Data columns (total 28 columns):\n",
      " #   Column             Non-Null Count  Dtype         \n",
      "---  ------             --------------  -----         \n",
      " 0   customer_id        7043 non-null   object        \n",
      " 1   begin_date         7043 non-null   datetime64[ns]\n",
      " 2   end_date           7043 non-null   object        \n",
      " 3   end_date_value     7043 non-null   datetime64[ns]\n",
      " 4   type               7043 non-null   object        \n",
      " 5   paperless_billing  7043 non-null   object        \n",
      " 6   payment_method     7043 non-null   object        \n",
      " 7   monthly_charges    7043 non-null   float32       \n",
      " 8   total_charges      7043 non-null   float32       \n",
      " 9   internet_service   7043 non-null   object        \n",
      " 10  online_security    7043 non-null   object        \n",
      " 11  online_backup      7043 non-null   object        \n",
      " 12  device_protection  7043 non-null   object        \n",
      " 13  tech_support       7043 non-null   object        \n",
      " 14  streaming_tv       7043 non-null   object        \n",
      " 15  streaming_movies   7043 non-null   object        \n",
      " 16  gender             7043 non-null   object        \n",
      " 17  senior_citizen     7043 non-null   int32         \n",
      " 18  partner            7043 non-null   object        \n",
      " 19  dependents         7043 non-null   object        \n",
      " 20  multiple_lines     7043 non-null   object        \n",
      " 21  dayofweek          7043 non-null   object        \n",
      " 22  month              7043 non-null   object        \n",
      " 23  year               7043 non-null   int32         \n",
      " 24  tenure             7043 non-null   int32         \n",
      " 25  has_crcard         7043 non-null   int32         \n",
      " 26  exited             7043 non-null   int32         \n",
      " 27  service_count      7043 non-null   int32         \n",
      "dtypes: datetime64[ns](2), float32(2), int32(6), object(18)\n",
      "memory usage: 1.3+ MB\n"
     ]
    }
   ],
   "source": [
    "# recheck dataframe information\n",
    "telecom_df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2d69ed5d",
   "metadata": {},
   "source": [
    "### Conclusion\n",
    "We carried out data preprocessing in order to merge the datasets, replace column names, change datatype, and generate new features for machine learning. We applied the SQL-flavored merging with pandas to merge the dataset. We renamed column names for improved readability, and change datatypes to the right format in order to reduce memory requirement during computation. We performed feature engineering in order to generate new features that will be helpful in exploring the data and useful for our machine learning process. Now the data is ready for further exploration."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9d6ca246",
   "metadata": {},
   "source": [
    "## Exploratory Data Analysis\n",
    "In exploring the data, we would be asking various questions that need answers in order to uncover or understand the data.\n",
    "\n",
    "### What payment type and payment methods are unique to Interconnect's customer?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "3ef2b645",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>type</th>\n",
       "      <th>unique count</th>\n",
       "      <th>percentage split (%)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>3875</td>\n",
       "      <td>55.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Two year</td>\n",
       "      <td>1695</td>\n",
       "      <td>24.07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>One year</td>\n",
       "      <td>1473</td>\n",
       "      <td>20.91</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             type  unique count percentage split (%)\n",
       "0  Month-to-month          3875                55.02\n",
       "1        Two year          1695                24.07\n",
       "2        One year          1473                20.91"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "unique_payment_type_count = (telecom_df['type'].value_counts() / telecom_df['type'].value_counts().sum() * 100).tolist()   \n",
    "\n",
    "# unique payment type\n",
    "unique_payment_type = telecom_df['type'].value_counts().reset_index().rename(columns={'index': 'type', 'type': 'unique count'})\n",
    "unique_payment_type['percentage split (%)'] = ['{:.2f}'.format(x) for x in unique_payment_type_count]\n",
    "unique_payment_type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "45403053",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>payment method</th>\n",
       "      <th>count</th>\n",
       "      <th>% payment split</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Electronic check</td>\n",
       "      <td>2365</td>\n",
       "      <td>33.58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Mailed check</td>\n",
       "      <td>1612</td>\n",
       "      <td>22.89</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Bank transfer (automatic)</td>\n",
       "      <td>1544</td>\n",
       "      <td>21.92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Credit card (automatic)</td>\n",
       "      <td>1522</td>\n",
       "      <td>21.61</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              payment method  count % payment split\n",
       "0           Electronic check   2365           33.58\n",
       "1               Mailed check   1612           22.89\n",
       "2  Bank transfer (automatic)   1544           21.92\n",
       "3    Credit card (automatic)   1522           21.61"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "unique_payment_method_count = (telecom_df['payment_method'].value_counts() / telecom_df['payment_method'].value_counts().sum() * 100).tolist()\n",
    "\n",
    "# unique payment method\n",
    "unique_payment_method = telecom_df['payment_method'].value_counts().reset_index().rename(columns={'index': 'payment method', 'payment_method': 'count'})\n",
    "unique_payment_method['% payment split'] = ['{:.2f}'.format(x) for x in unique_payment_method_count]\n",
    "unique_payment_method"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "17f0f062",
   "metadata": {},
   "source": [
    "From the analysis above, we see that most Interconnect customers prefer month-to-month payment with 33% of payment done using this medium. Also, electronic check was frequently used to make payment amongst the payment method available.\n",
    "\n",
    "### Can we deduce a relationship between payment method and total charges?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "94b79159",
   "metadata": {},
   "outputs": [],
   "source": [
    "# total charges grouped by payment method\n",
    "total_charges_grouped = telecom_df.groupby('payment_method', as_index=False).agg({'total_charges': 'sum'}).sort_values(\n",
    "    by='total_charges', ascending=False, ignore_index=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ddcf70b0",
   "metadata": {},
   "source": [
    "We can agree that customers making payment with electronic check had the highest total charges. With this knowledge, marketing team can channel more marketing campaign to make these set of customers use more services. Customers who mail-in check on the other hand had the lowest total charges. Here, marketing team can device new marketing campaign to make the these sets of customers to embrace either the bank transfer method or the electronic check method. If we can get all the customers sending in mail-in checks to use the electronic check, then we would have more total customer charges which translate to more revenue for Interconnect telecom.\n",
    "\n",
    "### Can we deduce a relationship between payment type and total monthly charges?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "6f5020ad",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>type</th>\n",
       "      <th>monthly_charges</th>\n",
       "      <th>total_charges</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Two year</td>\n",
       "      <td>103005.851562</td>\n",
       "      <td>6283253.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>257294.156250</td>\n",
       "      <td>5305861.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>One year</td>\n",
       "      <td>95816.601562</td>\n",
       "      <td>4467053.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             type  monthly_charges  total_charges\n",
       "0        Two year    103005.851562      6283253.5\n",
       "1  Month-to-month    257294.156250      5305861.5\n",
       "2        One year     95816.601562      4467053.5"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# total monthly charges grouped by payment type\n",
    "(telecom_df.groupby('type', as_index=False)\n",
    "     .agg({'monthly_charges': 'sum', 'total_charges': 'sum'})\n",
    "     .sort_values(by='total_charges', ascending=False, ignore_index=True)\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0db065ad",
   "metadata": {},
   "source": [
    "We can see that customers on a two-year contract bring in more total revenue than customers on a one year contract. The marketing team at Interconnect can introduce more two year contract plan to entice more customers to sign up for a two year contract.\n",
    "\n",
    "### Services count by contract type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "8e96d8bf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>type</th>\n",
       "      <th>service_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>6013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Two year</td>\n",
       "      <td>4654</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>One year</td>\n",
       "      <td>3686</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             type  service_count\n",
       "0  Month-to-month           6013\n",
       "1        Two year           4654\n",
       "2        One year           3686"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# services count grouped by contract type\n",
    "(telecom_df.groupby('type', as_index=False)\n",
    "     .agg({'service_count': 'sum'})\n",
    "     .sort_values(by='service_count', ascending=False, ignore_index=True)\n",
    ")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "77c17dc6",
   "metadata": {},
   "source": [
    "We observe that customers on a month-to-month contract use more services than customers on a one year contract. This knowledge would inform advertisement campaigns and marketing efforts.\n",
    "\n",
    "### What gender have the most total charges and service count?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "f2e3f5a4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>gender</th>\n",
       "      <th>total_charges</th>\n",
       "      <th>service_count</th>\n",
       "      <th>percent_total_charges</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Male</td>\n",
       "      <td>8103814</td>\n",
       "      <td>7144</td>\n",
       "      <td>50.471657</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Female</td>\n",
       "      <td>7952354</td>\n",
       "      <td>7209</td>\n",
       "      <td>49.528343</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   gender  total_charges  service_count  percent_total_charges\n",
       "0    Male        8103814           7144              50.471657\n",
       "1  Female        7952354           7209              49.528343"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# total charges grouped by gender\n",
    "gender_charges = telecom_df.groupby('gender', as_index=False).agg({'total_charges': 'sum', 'service_count': 'sum'}).sort_values(by='total_charges', ascending=False, ignore_index=True)\n",
    "change_datatype(gender_charges, ['total_charges'], 'int32')\n",
    "gender_charges['percent_total_charges'] = gender_charges['total_charges'] / sum(gender_charges['total_charges']) * 100\n",
    "gender_charges"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cb3e0e81",
   "metadata": {},
   "source": [
    "From the above, we can see that the female gender contributed almost as much as the male to the total charges and Interconnect's revenue. In addition, the female used more services than the male folks even though this did not translate to increased revenue or total charges.\n",
    "\n",
    "### Check correlation in data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "fda12d53",
   "metadata": {},
   "outputs": [],
   "source": [
    "# function to plot seaborn barplot\n",
    "def plot_snsbar(df, x, y, title):\n",
    "    xlabel = str(x.replace('_', ' ').capitalize())\n",
    "    ylabel = str(y.replace('_', ' ').capitalize())\n",
    "    # create grouped data\n",
    "    data = df.groupby([x])[y].count().sort_values(ascending=False).reset_index()\n",
    "    fig, ax=plt.subplots(figsize=(10,6))\n",
    "    ax = sns.barplot(x = x, y = y, data=data)\n",
    "    ax.set_title(title, fontdict={'size':12})\n",
    "    ax.set_ylabel(ylabel, fontsize = 10)\n",
    "    ax.set_xlabel(xlabel, fontsize = 10)\n",
    "    ax.set_xticklabels(data[x], rotation=90);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "62d8427f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# correlation matrix of features\n",
    "plt.figure(figsize=(8, 6))\n",
    "corrMatrix = telecom_df.corr()\n",
    "sns.heatmap(corrMatrix, annot=True, cmap='coolwarm')\n",
    "plt.title('Correlation Matrix Plot for certain features')\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "41e57590",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# correlation of tenure and churn\n",
    "telecom_df.plot(\n",
    "    x='tenure', y='exited', title = 'Hexagonal binning plot for correlation of tenure and churn', \n",
    "    kind='hexbin', gridsize=20, figsize=(8, 6), sharex=False, grid=True\n",
    ");"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6dcde2d5",
   "metadata": {},
   "source": [
    "From the correlation plot, we can see that there is a strong negative correlation between tenure and exited (or churn). Customers with less tenure are more likely to churn than well-established customers. To prevent churn, Interconnect telecom must introduce promotion and increase service offering in other to keep customers for longer. We see that the longer a customer stays with Interconnect telecoms, the less likely the customers churn. Whether a customer made subscription on a month-to-month basis did not really affect churn."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "7f591798",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# correlation of dependents on customer churn\n",
    "telecom_df['has_dependents'] = [1 if x != 'No' else 0 for x in telecom_df['dependents']]\n",
    "telecom_df.plot(\n",
    "    x='has_dependents', y='exited', title = 'Hexagonal binning plot for correlation of dependents and customer churn', \n",
    "    kind='hexbin', gridsize=20, figsize=(8, 6), sharex=False, grid=True\n",
    ");"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c009b40b",
   "metadata": {},
   "source": [
    "We can see that more customers without dependents stayed longer with Interconnect telecoms than customers with dependent. This is reasonable because having dependent tends to increase your average expenses. It would make sense for Interconnect to target customers with less dependents.\n",
    "\n",
    "### Can contract type affect customer churn?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "96aeeec5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>type</th>\n",
       "      <th>exited</th>\n",
       "      <th>% exit percent</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>1655</td>\n",
       "      <td>55.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>One year</td>\n",
       "      <td>166</td>\n",
       "      <td>24.07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Two year</td>\n",
       "      <td>48</td>\n",
       "      <td>20.91</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             type  exited % exit percent\n",
       "0  Month-to-month    1655          55.02\n",
       "1        One year     166          24.07\n",
       "2        Two year      48          20.91"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# effect of contract type on customer churn\n",
    "contract_type_percent = telecom_df.groupby(\n",
    "    'type', as_index=False).agg(\n",
    "    {'exited': 'sum'}).sort_values(\n",
    "    by='exited', ascending=False, ignore_index=True)\n",
    "contract_type_effect = (telecom_df['type'].value_counts() / telecom_df['type'].value_counts().sum() * 100).tolist()\n",
    "contract_type_percent['% exit percent'] = ['{:.2f}'.format(x) for x in contract_type_effect]\n",
    "contract_type_percent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "cd5dbf54",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot of contract type on customer churn\n",
    "plot_snsbar(telecom_df, 'type', 'exited', 'Plot of contract type on customer churn')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ea5f035e",
   "metadata": {},
   "source": [
    "We visualized the contract type to see whether customers with shorter contract churn faster than customers with year-long contracts. Our analysis shows that customers with two-year long contract tends to stay longer while customers on a month-to-month contract type churned faster.\n",
    "\n",
    "### What are the top 5 services offered?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "d6629df4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>...</th>\n",
       "      <th>7033</th>\n",
       "      <th>7034</th>\n",
       "      <th>7035</th>\n",
       "      <th>7036</th>\n",
       "      <th>7037</th>\n",
       "      <th>7038</th>\n",
       "      <th>7039</th>\n",
       "      <th>7040</th>\n",
       "      <th>7041</th>\n",
       "      <th>7042</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>online_security</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>online_backup</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>device_protection</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tech_support</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>streaming_tv</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>streaming_movies</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>exited</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>7 rows × 7043 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                   0     1     2     3     4     5     6     7     8     9     \\\n",
       "online_security       0     1     1     1     0     0     0     1     0     1   \n",
       "online_backup         1     0     1     0     0     0     1     0     0     1   \n",
       "device_protection     0     1     0     1     0     1     0     0     1     0   \n",
       "tech_support          0     0     0     1     0     0     0     0     1     0   \n",
       "streaming_tv          0     0     0     0     0     1     1     0     1     0   \n",
       "streaming_movies      0     0     0     0     0     1     0     0     1     0   \n",
       "exited                0     0     1     0     1     1     0     0     1     0   \n",
       "\n",
       "                   ...  7033  7034  7035  7036  7037  7038  7039  7040  7041  \\\n",
       "online_security    ...     0     1     0     0     0     1     0     1     0   \n",
       "online_backup      ...     0     1     0     1     0     0     1     0     0   \n",
       "device_protection  ...     0     1     0     1     0     1     1     0     0   \n",
       "tech_support       ...     0     0     0     1     0     1     0     0     0   \n",
       "streaming_tv       ...     0     1     1     1     0     1     1     0     0   \n",
       "streaming_movies   ...     0     0     0     1     0     1     1     0     0   \n",
       "exited             ...     0     1     0     0     0     0     0     0     1   \n",
       "\n",
       "                   7042  \n",
       "online_security       1  \n",
       "online_backup         0  \n",
       "device_protection     1  \n",
       "tech_support          1  \n",
       "streaming_tv          1  \n",
       "streaming_movies      1  \n",
       "exited                0  \n",
       "\n",
       "[7 rows x 7043 columns]"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# we create a copy of the dataframe to use for encoding\n",
    "telecom_df_encode = telecom_df.copy()\n",
    "\n",
    "# encoding services offered \n",
    "online_security = {'online_security':{'Yes': 1, 'No': 0}}\n",
    "online_backup = {'online_backup':{'Yes': 1, 'No': 0}}\n",
    "device_protection = {'device_protection':{'Yes': 1, 'No': 0}}\n",
    "tech_support = {'tech_support':{'Yes': 1, 'No': 0}}\n",
    "streaming_tv = {'streaming_tv':{'Yes': 1, 'No': 0}}\n",
    "streaming_movies = {'streaming_movies':{'Yes': 1, 'No': 0}}\n",
    "\n",
    "telecom_df_encode.replace(online_security, inplace =True)\n",
    "telecom_df_encode.replace(online_backup, inplace =True)\n",
    "telecom_df_encode.replace(device_protection, inplace =True)\n",
    "telecom_df_encode.replace(tech_support, inplace =True)\n",
    "telecom_df_encode.replace(streaming_tv, inplace =True)\n",
    "telecom_df_encode.replace(streaming_movies, inplace =True)\n",
    "\n",
    "telecom_services_data = telecom_df_encode[['online_security', 'online_backup', 'device_protection', 'tech_support', 'streaming_tv', 'streaming_movies', 'exited']]\n",
    "telecom_services_data = telecom_services_data.transpose()\n",
    "telecom_services_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "b5077ae6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>services</th>\n",
       "      <th>count</th>\n",
       "      <th>% service offered</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>streaming_movies</td>\n",
       "      <td>2732</td>\n",
       "      <td>16.841327</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>streaming_tv</td>\n",
       "      <td>2707</td>\n",
       "      <td>16.687215</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>online_backup</td>\n",
       "      <td>2429</td>\n",
       "      <td>14.973493</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>device_protection</td>\n",
       "      <td>2422</td>\n",
       "      <td>14.930342</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>tech_support</td>\n",
       "      <td>2044</td>\n",
       "      <td>12.600173</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>online_security</td>\n",
       "      <td>2019</td>\n",
       "      <td>12.446061</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>exited</td>\n",
       "      <td>1869</td>\n",
       "      <td>11.521391</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            services  count  % service offered\n",
       "0   streaming_movies   2732          16.841327\n",
       "1       streaming_tv   2707          16.687215\n",
       "2      online_backup   2429          14.973493\n",
       "3  device_protection   2422          14.930342\n",
       "4       tech_support   2044          12.600173\n",
       "5    online_security   2019          12.446061\n",
       "6             exited   1869          11.521391"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# getting dataframe showing services and percentage count \n",
    "telecom_services_data['count'] = telecom_services_data.sum(axis=1)\n",
    "telecom_services_df = telecom_services_data.reset_index(inplace=False)\n",
    "telecom_services_df = telecom_services_df[['index', 'count']].rename(columns={'index': 'services'})\n",
    "telecom_services_df['% service offered']  = telecom_services_df['count'] / telecom_services_df['count'].sum() * 100\n",
    "telecom_services = telecom_services_df.copy()\n",
    "telecom_services.sort_values('% service offered', axis = 0, ascending = False, inplace = True, ignore_index=True)\n",
    "telecom_services"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "8306c112",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot of top 5 Interconnect service by count \n",
    "telecom_services_pie = telecom_services.head(5)\n",
    "(telecom_services_pie.set_index('services').plot(y='% service offered', kind='pie', \n",
    "                      title = 'Pie chart showing relative size of the five popular services', \n",
    "                      figsize=(8, 8), autopct='%1.1f%%', shadow=True)\n",
    ");"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aec5175b",
   "metadata": {},
   "source": [
    "From the plot of top 5 services offered by Interconnect telecoms, we can see that streaming_tv, streaming_videos are in high demand.\n",
    "\n",
    "### Can number of services offered affect customer churn?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "6a78fea9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot of service count on customer churn\n",
    "plot_snsbar(telecom_df, 'service_count', 'exited', 'Plot of service count on customer churn')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "555d6ca1",
   "metadata": {},
   "source": [
    "The service count has very weak correlation with customer churn. From the plot, we see that customers using between 5 and 6 services churned less whereas customers with no service churned the greatest. This indicates that having customers to sign up for more than 5 services at a time may likely prevent customer churn.\n",
    "\n",
    "### What about the day of the week effect on customer churn?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "a308ec1c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot to determine day of the week effect on customer churn\n",
    "plot_snsbar(telecom_df, 'dayofweek', 'exited', 'Plot of day of the week effect on customer churn')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5aa2558c",
   "metadata": {},
   "source": [
    "We can see that most churn occured during the weekend. With this knowledge, Interconnect telecom can introduce incentives and weekend service bonuses to ensure customers do not disconnect their services over the weekend.\n",
    "\n",
    "### What months had the most churn and how can it be prevented?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "3b81dc33",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot to determine months with the most churn\n",
    "plot_snsbar(telecom_df, 'month', 'exited', 'Plot of months with the most customer churn')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fbb1879c",
   "metadata": {},
   "source": [
    "From the plot above, the months of February, September, November and December had the most churn. With this understanding, Interconnect telecoms can introduce several bonuses, free service plans, free movie streaming services or discounted TV streaming services for six months starting from September to February. This will prevent customer churn during those period.\n",
    "\n",
    "### Conclusion\n",
    "We can conclude the following from the exploratory data analysis done:\n",
    "\n",
    "- Most of Interconnect customers prefer month-to-month payment with 61% of payment done using month-to-month\n",
    "- Payment made with electronic check had the highest total charges and thus will bring in the most revenue\n",
    "- Customers on a two-year contract have the highest total charges and bring in more total revenue than customers on a one year contract.\n",
    "- Customers on a two-year contract churn less than other contract type.\n",
    "- Customers with more than 5 services at a time churn less\n",
    "- Most churn occured at weekends.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d44c5ed0",
   "metadata": {},
   "source": [
    "## Model training\n",
    "Here, we would train different models:\n",
    "\n",
    "- We split the data into 80% training and 20% testing sets\n",
    "- We use AUC-ROC as our primary metric and accuracy as the secondary metric to predict customer churn\n",
    "- We apply encoding to categorical variables so they can be read by our machine learning models\n",
    "- We scale the data by applying standard scaler function to the features\n",
    "- We would use a linear regresion model as our baseline model\n",
    "- We would train different tree based models and gradient boosting models\n",
    "- We would apply hyperparameter tuning to tune our different model and cross validation during sampling of data for machine learning\n",
    "- We would choose the best performing models on the training accuracy and AUC-ROC metric\n",
    "\n",
    "## Model testing\n",
    "- Using the best performing model, we would evaluate the test dataset\n",
    "- The best performing model is one that has the best accuracy on the training set\n",
    "- We would plot a confusion matrix for the models performance on the test sets\n",
    "- We would determine the best model based on the accuracy of the test set\n",
    "\n",
    "## Conclusion\n",
    "- Based on the chosen model, we would predict customer churn for Interconnect telecoms"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "724a939d",
   "metadata": {},
   "source": [
    "# Comments from Reviewer\n",
    "The plan moving forward looks good, but the idea will be to do data-preprocessing and EDA in this stage. Try doing this and then move on!"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0de9444a",
   "metadata": {},
   "source": [
    "# New Comments from Reviewer\n",
    "Great job, you are good to move on!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1319df60",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "ExecuteTimeLog": [
   {
    "duration": 1813,
    "start_time": "2022-03-24T16:16:47.458Z"
   },
   {
    "duration": 239,
    "start_time": "2022-03-24T16:16:50.139Z"
   },
   {
    "duration": 26,
    "start_time": "2022-03-24T16:16:52.175Z"
   },
   {
    "duration": 17,
    "start_time": "2022-03-24T16:16:53.053Z"
   },
   {
    "duration": 13,
    "start_time": "2022-03-24T16:16:53.734Z"
   },
   {
    "duration": 10,
    "start_time": "2022-03-24T16:16:54.345Z"
   },
   {
    "duration": 1062,
    "start_time": "2022-03-24T16:17:57.883Z"
   },
   {
    "duration": 12,
    "start_time": "2022-03-24T16:18:22.614Z"
   },
   {
    "duration": 140,
    "start_time": "2022-03-24T16:20:13.599Z"
   },
   {
    "duration": 171,
    "start_time": "2022-03-24T16:23:46.416Z"
   },
   {
    "duration": 131,
    "start_time": "2022-03-24T16:24:14.391Z"
   },
   {
    "duration": 71,
    "start_time": "2022-03-24T16:28:41.919Z"
   },
   {
    "duration": 79,
    "start_time": "2022-03-24T16:30:10.734Z"
   },
   {
    "duration": 23,
    "start_time": "2022-03-24T16:30:22.787Z"
   },
   {
    "duration": 8,
    "start_time": "2022-03-24T16:30:56.570Z"
   },
   {
    "duration": 157,
    "start_time": "2022-03-24T16:31:54.172Z"
   },
   {
    "duration": 26,
    "start_time": "2022-03-24T16:32:07.067Z"
   },
   {
    "duration": 6,
    "start_time": "2022-03-24T16:32:51.347Z"
   },
   {
    "duration": 138,
    "start_time": "2022-03-24T16:33:09.445Z"
   },
   {
    "duration": 37,
    "start_time": "2022-03-24T16:33:31.878Z"
   },
   {
    "duration": 25,
    "start_time": "2022-03-24T16:34:17.720Z"
   },
   {
    "duration": 20,
    "start_time": "2022-03-24T16:36:23.526Z"
   },
   {
    "duration": 21,
    "start_time": "2022-03-24T16:36:36.087Z"
   },
   {
    "duration": 11,
    "start_time": "2022-03-24T16:57:11.073Z"
   },
   {
    "duration": 20,
    "start_time": "2022-03-24T16:59:42.988Z"
   },
   {
    "duration": 17,
    "start_time": "2022-03-24T17:01:47.545Z"
   },
   {
    "duration": 23,
    "start_time": "2022-03-24T17:02:28.903Z"
   },
   {
    "duration": 6,
    "start_time": "2022-03-24T17:03:20.530Z"
   },
   {
    "duration": 9,
    "start_time": "2022-03-24T17:04:19.662Z"
   },
   {
    "duration": 1088,
    "start_time": "2022-03-24T17:04:50.996Z"
   },
   {
    "duration": 354,
    "start_time": "2022-03-24T17:05:02.929Z"
   },
   {
    "duration": 392,
    "start_time": "2022-03-24T17:06:50.456Z"
   },
   {
    "duration": 30,
    "start_time": "2022-03-24T17:08:10.613Z"
   },
   {
    "duration": 231,
    "start_time": "2022-03-24T17:08:22.859Z"
   },
   {
    "duration": 68,
    "start_time": "2022-03-24T17:08:54.965Z"
   },
   {
    "duration": 38,
    "start_time": "2022-03-24T17:09:06.757Z"
   },
   {
    "duration": 460,
    "start_time": "2022-03-24T17:09:16.922Z"
   },
   {
    "duration": 248,
    "start_time": "2022-03-24T17:09:57.496Z"
   },
   {
    "duration": 254,
    "start_time": "2022-03-24T17:10:29.533Z"
   },
   {
    "duration": 323,
    "start_time": "2022-03-24T17:11:00.244Z"
   }
  ],
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.5"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": true,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
